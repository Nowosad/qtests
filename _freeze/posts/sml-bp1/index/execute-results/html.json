{
  "hash": "11a5d7c2f800cd021b61a5e50d8df009",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spatial machine learning with R: caret, tidymodels, and mlr3\"\nauthor:\n    - name: Jakub Nowosad\n      url: https://jakubnowosad.com\n      orcid:  0000-0002-1057-3721\ndate: \"2025-04-30\"\nslug: sml-bp1\ncategories:\n    - rstats\n    - sml\ntags: [caret, CAST, mlr3, tidymodels, machine-learning, spatial-machine-learning]\ndraft: false\nmermaid-format: png\nknitr:\n    opts_chunk:\n        message: false\n---\n\n::: {.callout-note appearance=\"simple\"}\n\nThis is the first part of a blog post series on spatial machine learning with R.\n\n- [Part 2](/post/2025/sml-bp2/): Spatial machine learning with caret\n- [Part 3](/post/2025/sml-bp3/): Spatial machine learning with the tidymodels framework\n- [Part 4](/post/2025/sml-bp4/): Spatial machine learning with mlr3\n- [Part 5](/post/2025/sml-bp5/): Specialized R packages for spatial machine learning: An introduction to RandomForestsGLS, spatialRF, and meteo\n- [Part 6](/post/2025/sml-bp6/): Specialized R packages for spatial cross-validation: sperrorest and blockCV\n\n:::\n\nThe R language has a variety of packages for machine learning, and many of them can be used for machine learning tasks in a spatial context (*spatial machine learning*).\nSpatial machine learning is generally different from traditional machine learning, as variables located closer to each other are often more similar than those located further apart.\nThus, we need to consider that when building machine learning models.\n\nIn this blog post, we compare three of the most popular machine learning frameworks in R: **caret**, **tidymodels**, and **mlr3**.\nWe use a simple example to demonstrate how to use these frameworks for a spatial machine learning task and how their workflows differ.\nThe goal here is to provide a general sense of how the spatial machine learning workflow looks like, and how different frameworks can be used to achieve the same goal.\n\n<!-- \n\n```{mermaid}\n%%| fig-width: 8\n%%| fig-height: 6.5\n%%| echo: false\n%%| eval: false\n%%| fig-cap: \"A possible workflow of the spatial machine learning task.\"\nflowchart TB\n    A[Data] --> B(Model specification)\n    B --> C(Resampling #1)\n    B --> D(Resampling #2)\n    B --> E(Resampling #...)\n    B --> F(Resampling #N)\n    C --> G(Evaluation)\n    D --> G\n    E --> G\n    F --> G\n    G --> H[Prediction]\n    H --> I[Area of applicability]\n```\n\n-->\n\n![A possible workflow of the spatial machine learning task.](mermaid-figure-1.png)\n\n# Inputs\n\nOur task is to predict the temperature in Spain using a set of covariates. \nWe have two datasets for that purpose: the first one, `temperature_train`, contains the temperature measurements from 195 locations in Spain, and the second one, `predictor_stack`, contains the covariates we will use to predict the temperature.^[Source of the data: Mil√† et al. (2024), https://doi.org/10.5194/gmd-17-6007-2024]\nThese covariates include variables such as population density (`popdens`), distance to the coast (`coast`), and elevation (`elev`), among others.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}